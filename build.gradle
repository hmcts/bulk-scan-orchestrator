plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.0'
  id 'org.owasp.dependencycheck' version '8.3.1'
  id 'org.springframework.boot' version '2.7.14'
  id 'com.github.ben-manes.versions' version '0.47.0'
  id 'org.sonarqube' version '4.2.1.3168'
  id 'info.solidsoft.pitest' version '1.7.0'
  id 'au.com.dius.pact' version '4.3.14'
  id 'org.flywaydb.flyway' version '9.21.1'
}

group = 'uk.gov.hmcts.reform'
version = '0.1.0' // all the time it was 0.0.1. 0.1.0 marks migration to java 11

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

sourceSets {
  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

task runAndPublishConsumerPactTests(type: Test) {
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
}

runAndPublishConsumerPactTests.finalizedBy pactPublish

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

task contract(type: Test) {
  description = "Runs contracts tests"
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
}

task fortifyScan(type: JavaExec)  {
  main = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

checkstyle {
  maxWarnings = 0
  toolVersion = '9.3'
  // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
  configDirectory.set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.55.0"
  ignoreFailures = true
  incrementalAnalysis = true
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  dependsOn test, integration
  executionData(test, integration)
  reports {
    xml.enabled = true
    csv.enabled = false
    html.destination file("${buildDir}/reports/jacoco/html")
    xml.destination file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
  afterEvaluate {
    getClassDirectories().from = getClassDirectories().files.collect {
      fileTree(dir: it, exclude: [
        'uk/gov/hmcts/reform/bulkscan/orchestrator/config/**'
      ])
    }
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

pitest {
  group = "Verification"
  pitestVersion.set('1.5.1')
  junit5PluginVersion.set('0.15')
  testSourceSets = [sourceSets.test]
  mainSourceSets = [sourceSets.main]
//  targetClasses = ['uk.gov.hmcts.reform.bulkscan.orchestrator.*']
//  excludedClasses = [
//    'uk.gov.hmcts.reform.bulkscan.orchestrator.config.*'
//  ]
  threads = 15
  enableDefaultIncrementalAnalysis = true
  historyInputLocation = 'build/reports/pitest/fastermutationtesting'
  historyOutputLocation = 'build/reports/pitest/fastermutationtestingoutput'
  outputFormats = ['XML', 'HTML']
  timestampedReports = false
  mutationThreshold = 0
  coverageThreshold = 0
  failWhenNoMutations = false
  timeoutConstInMillis = 30000
  mutators.set([
    'CONDITIONALS_BOUNDARY',
    'INCREMENTS',
    'INVERT_NEGS',
    'MATH',
    'NEGATE_CONDITIONALS',
    'VOID_METHOD_CALLS',
    'EMPTY_RETURNS',
    'FALSE_RETURNS',
    'NULL_RETURNS',
    'PRIMITIVE_RETURNS',
    'TRUE_RETURNS',
    'REMOVE_CONDITIONALS'
  ])
}

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: Bulk Scan Orchestrator"
    property "sonar.coverage.jacoco.xmlReportPaths", jacocoTestReport.reports.xml.destination.path
    // TODO: remove the specific exclusions when those classes are used
    property "sonar.coverage.exclusions", "**/config/**"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    property "sonar.cpd.exclusions", "**/caseupdate/model/request/ExceptionRecord.java,**/TransformationRequest.java,**/internal/ExceptionRecord.java"
    property "sonar.exclusions", "**/envelopes/JmsEnvelopeMessageProcessor.java,**/payments/JmsPaymentsPublisher.java,**/processedenvelopes/JmsProcessedEnvelopeNotifier.java"
  }
}

pact {
  publish {
    pactBrokerUrl = 'https://pact-broker.platform.hmcts.net'
    version = '0.0.1'
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'
  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

// it is important to specify logback classic and core packages explicitly as libraries like spring boot
// enforces it's own (older) version which is not recommended.
def versions = [
  reformLogging     : '6.0.1',
  springfoxSwagger  : '2.9.2',
  junit             : '5.9.3',
  junitPlatform     : '1.9.3',
]

configurations.all {
  exclude group: 'org.springframework.security', module: 'spring-security-rsa'
  exclude group: 'org.springframework.boot', module: 'spring-boot-starter-security'
}

dependencyManagement {
  dependencies {
    // This includes the deprecated @EnableCircuitBreaker (Application.class)
    // Consider removing this and fixing the issues that come out
    dependencySet(group: 'org.springframework.cloud', version: '3.1.8') {
      entry 'spring-cloud-starter-openfeign'
    }
    dependencySet(group: 'com.google.guava', version: '32.1.0-jre') {
      entry 'guava'
    }
    dependencySet(group: 'org.yaml', version: '2.0') {
      entry 'snakeyaml'
    }
    dependencySet(group: 'commons-fileupload', version: '1.5') {
      entry 'commons-fileupload'
    }
  }
}

dependencies {

  implementation group: 'org.postgresql', name: 'postgresql', version: '42.5.4'
  implementation group: 'org.flywaydb', name: 'flyway-core', version: '9.19.4'

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap', version: '3.1.7'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.10.RELEASE'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-activemq'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.7.0'
  implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformLogging
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: versions.reformLogging
  implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '7.4'
  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '4.1.2'
  implementation group: 'com.github.hmcts', name: 'idam-java-client', version: '3.0.1'
  implementation group: 'com.github.hmcts', name: 'ccd-client', version: '4.9.2'

  implementation group: 'com.azure', name: 'azure-messaging-servicebus', version: '7.14.1'

  implementation group: 'io.vavr', name: 'vavr', version: '0.10.4'
  implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '3.1.6'

  implementation group: 'org.apache.qpid', name: 'qpid-jms-client', version: '1.9.0'

  annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  testImplementation group: 'com.typesafe', name: 'config', version: '1.4.2'
  testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.4.0'
  testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.24.2'
  testImplementation group: 'org.awaitility', name: 'awaitility', version: '4.2.0'
  testImplementation group: 'io.rest-assured', name: 'rest-assured'

  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
  testImplementation group: 'org.junit.platform', name: 'junit-platform-commons', version: versions.junitPlatform
  testImplementation group: 'org.junit.platform', name: 'junit-platform-engine', version: versions.junitPlatform
  testImplementation group: 'org.apiguardian', name: 'apiguardian-api', version: '1.1.2'

  testImplementation group: 'io.github.netmikey.logunit', name: 'logunit-core', version: '2.0.0'
  testImplementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.3.0', classifier: 'all'
  testRuntimeOnly group: 'io.github.netmikey.logunit', name: 'logunit-logback', version: '2.0.0'

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath
  integrationTestImplementation group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: '3.1.8'
  integrationTestImplementation group: 'org.apiguardian', name: 'apiguardian-api', version: '1.1.2'

  integrationTestImplementation group: 'org.testcontainers', name: 'postgresql', version: '1.18.3', {
    exclude group: 'junit', module: 'junit'
  }
  integrationTestImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: '1.18.3'

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath

  implementation group: 'com.github.hmcts', name: 'ccd-case-document-am-client', version: '1.7.2'

  functionalTestImplementation group: 'org.apiguardian', name: 'apiguardian-api', version: '1.1.2'

  functionalTestImplementation group: 'org.testcontainers', name: 'postgresql', version: '1.18.3', {
    exclude group: 'junit', module: 'junit'
  }
  functionalTestImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: '1.18.3'

  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath

  contractTestImplementation sourceSets.main.runtimeClasspath
  contractTestImplementation sourceSets.test.runtimeClasspath
  contractTestImplementation group: 'io.rest-assured', name: 'rest-assured'
  contractTestImplementation group: 'au.com.dius', name: 'pact-jvm-consumer-junit5', version: '4.0.10'
}

mainClassName = 'uk.gov.hmcts.reform.bulkscan.orchestrator.Application'

bootJar {
  getArchiveFileName().set(provider {
    'bulk-scan-orchestrator.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

import org.flywaydb.gradle.task.FlywayMigrateTask

flyway {
  user = System.getenv('DB_USER')
  password = System.getenv('DB_PASSWORD')

  baselineOnMigrate = true
  baselineVersion = '000'
}

task migratePostgresDatabase(type: FlywayMigrateTask) {
  baselineOnMigrate = true
  if (project.hasProperty("dburl")) { // set by jenkins
    url = "jdbc:postgresql://${dburl}"
  }
}
