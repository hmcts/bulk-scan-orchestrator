plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.8.RELEASE'
  id 'org.owasp.dependencycheck' version '5.0.0'
  id 'org.springframework.boot' version '2.1.6.RELEASE'
  id 'com.github.ben-manes.versions' version '0.21.0'
  id 'org.sonarqube' version '2.7.1'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath

  environment 'APPINSIGHTS_INSTRUMENTATIONKEY', 'functional-test'
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true

  // this will go away once java-logging-appinsights is bumped to 5.x.x
  environment 'APPINSIGHTS_INSTRUMENTATIONKEY', 'test'
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.19'
  // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
  configDir = new File(rootDir, 'config/checkstyle')
}

pmd {
  toolVersion = "6.14.0"
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  dependsOn test, integration
  executionData(test, integration)
  reports {
    xml.enabled = true
    csv.enabled = false
    html.destination file("${buildDir}/reports/jacoco/html")
    xml.destination file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
  afterEvaluate {
    getClassDirectories().from = getClassDirectories().files.collect {
      fileTree(dir: it, exclude: [
        'uk/gov/hmcts/reform/bulkscan/orchestrator/config/**'
      ])
    }
  }
}

project.tasks['sonarqube'].dependsOn test, integration

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: Bulk Scan Orchestrator"
    property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
    property "sonar.jacoco.itReportPath", "${project.buildDir}/jacoco/integration.exec"
    property "sonar.coverage.exclusions", "**/config/**"
  }
}

dependencyUpdates.resolutionStrategy {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]$qualifier[.\d-+]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'
  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

repositories {
  mavenLocal()
  jcenter()
  maven {
    url 'https://dl.bintray.com/hmcts/hmcts-maven'
  }
}

// it is important to specify logback classic and core packages explicitly as libraries like spring boot
// enforces it's own (older) version which is not recommended.
def versions = [
  reformLogging     : '5.0.1',
  springBoot        : springBoot.class.package.implementationVersion,
  springHystrix     : '2.1.1.RELEASE',
  springfoxSwagger  : '2.9.2',
  junit             : '5.4.2'
]

ext["rest-assured.version"] = '4.0.0'

dependencyManagement {
  dependencies {
    // CVE-2018-10237 - Unbounded memory allocation
    dependencySet(group: 'com.google.guava', version: '27.1-jre') {
      entry 'guava'
    }
    // solves: CVE-2017-13098, CVE-2018-1000180, CVE-2018-1000613
    dependencySet(group: 'org.bouncycastle', version: '1.61') {
      entry 'bcprov-jdk15on'
    }
    // solves: CVE-2016-4977, CVE-2018-15758
    dependencySet(group: 'org.springframework.security', version: '1.0.8.RELEASE') {
      entry 'spring-security-rsa'
    }
    // align with jupiter version
    dependencySet(group: 'org.mockito', version: '2.28.2') {
      entry 'mockito-core'
    }
  }
}

dependencies {
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-json', version: versions.springBoot
  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: versions.springHystrix

  compile group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
  compile group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger

  compile group: 'uk.gov.hmcts.reform', name: 'java-logging', version: versions.reformLogging
  compile group: 'uk.gov.hmcts.reform', name: 'java-logging-appinsights', version: versions.reformLogging
  compile group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '3.0.0'
  compile group: 'uk.gov.hmcts.reform', name: 'idam-client', version: '0.0.5'
  compile group: 'uk.gov.hmcts.reform', name: 'core-case-data-store-client', version: '4.6.4'
  compile group: 'uk.gov.hmcts.reform', name: 'health-spring-boot-starter', version:'0.0.4'
  compile group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version:'0.0.4'

  compile group: 'com.microsoft.azure', name: 'azure-servicebus', version: '1.2.14'
  compile group: 'io.vavr', name: 'vavr', version: '0.10.0'

  annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'

  testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot, {
    exclude group: 'junit', module: 'junit'
  }
  testCompile group: 'com.typesafe', name: 'config', version: '1.3.4'
  testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: '2.28.2'
  testCompile group: 'org.assertj', name: 'assertj-core', version: '3.12.2'
  testCompile group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: '2.0.2.RELEASE'
  testCompile group: 'org.awaitility', name: 'awaitility', version: '3.1.6'
  testCompile group: 'io.rest-assured', name: 'rest-assured'

  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: versions.junit

  integrationTestCompile sourceSets.main.runtimeClasspath
  integrationTestCompile sourceSets.test.runtimeClasspath

  integrationTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: versions.junit

  functionalTestCompile sourceSets.main.runtimeClasspath
  functionalTestCompile sourceSets.test.runtimeClasspath
  functionalTestCompile group: 'uk.gov.hmcts.reform', name: 'document-management-client', version: '6.0.0'

  functionalTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: versions.junit

  smokeTestCompile sourceSets.main.runtimeClasspath
  smokeTestCompile sourceSets.test.runtimeClasspath

  smokeTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: versions.junit
}

mainClassName = 'uk.gov.hmcts.reform.bulkscan.orchestrator.Application'

bootJar {
  getArchiveFileName().set(provider {
    'bulk-scan-orchestrator.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}
