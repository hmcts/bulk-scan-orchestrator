#!groovy
@Library("Infrastructure")

import uk.gov.hmcts.contino.AppPipelineDsl
import uk.gov.hmcts.contino.DockerImage
import uk.gov.hmcts.contino.GradleBuilder
import uk.gov.hmcts.contino.Kubectl
import uk.gov.hmcts.pipeline.TeamConfig

def type = "java"
def product = "bulk-scan"
def component = "orchestrator"

def channel = '#bsp-build-notices'
GradleBuilder builder = new GradleBuilder(this, product)

def nonPrSecrets = [
  's2s-${env}': [
    secret('microservicekey-bulk-scan-orchestrator', 'S2S_SECRET'),
    secret('microservicekey-bulk-scan-processor', 'PROCESSOR_S2S_SECRET')
  ],
  'bulk-scan-${env}': [
    secret('idam-users-bulkscan-username', 'IDAM_USER_NAME'),
    secret('idam-users-bulkscan-password', 'IDAM_USER_PASSWORD'),
    secret('idam-client-secret', 'IDAM_CLIENT_SECRET'),
    secret('envelopes-staging-queue-send-shared-access-key', 'ENVELOPES_QUEUE_WRITE_ACCESS_KEY'),
    secret('envelopes-staging-queue-listen-shared-access-key', 'ENVELOPES_QUEUE_READ_ACCESS_KEY'),
    secret('payments-staging-queue-send-shared-access-key', 'PAYMENTS_QUEUE_WRITE_ACCESS_KEY')
  ]
]
def prSecrets = [
  's2s-${env}': [
    secret('microservicekey-bulk-scan-orchestrator', 'S2S_SECRET'),
    secret('microservicekey-bulk-scan-processor', 'PROCESSOR_S2S_SECRET')
  ],
  'bulk-scan-${env}': [
    secret('idam-users-bulkscan-username', 'IDAM_USER_NAME'),
    secret('idam-users-bulkscan-password', 'IDAM_USER_PASSWORD'),
    secret('idam-client-secret', 'IDAM_CLIENT_SECRET')
  ]
]
static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

withPipeline(type, product, component) {

  afterSuccess('akschartsinstall'){
    // Vars needed for AKS testing
    env.S2S_NAME = 'bulk_scan_orchestrator'
    env.PROCESSOR_S2S_NAME = 'bulk_scan_processor'
    env.S2S_URL = 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'
    env.DOCUMENT_MANAGEMENT_URL = 'http://dm-store-aat.service.core-compute-aat.internal'
    // CDAM
    env.CASE_DOCUMENT_AM_URL = 'http://ccd-case-document-am-api-aat.service.core-compute-aat.internal'
    env.CORE_CASE_DATA_API_URL = 'http://ccd-data-store-api-aat.service.core-compute-aat.internal'
    env.IDAM_API_URL = 'https://idam-api.aat.platform.hmcts.net'
    env.IDAM_CLIENT_REDIRECT_URI = 'https://bulk-scan-orchestrator-aat.service.core-compute-aat.internal/oauth2/callback'
    env.QUEUE_NAMESPACE = "bulk-scan-servicebus-aat-premium"
    env.QUEUE_ENVELOPES_NAME = "envelopes-staging"
    env.QUEUE_PAYMENTS_NAME = "payments-staging"
    env.QUEUE_READ_ACCESS_KEY_NAME = 'ListenSharedAccessKey'
    env.QUEUE_WRITE_ACCESS_KEY_NAME = 'SendSharedAccessKey'
    env.JMS_ENABLED = false
    env.SPRING_PROFILES_ACTIVE = 'default'
  }

  before('smoketest:preview') {
    withAksClient('nonprod', product){
      // Envelopes queue connection string is needed by the functional tests client.
      // The following code (as ugly as it looks!) gets it from the k8s cluster
      def dockerImage = new DockerImage(product, component, null, env.BRANCH_NAME, env.GIT_COMMIT, env.LAST_COMMIT_TIMESTAMP)
      def subscription = env.SUBSCRIPTION_NAME
      def aksServiceName = dockerImage.getAksServiceName().toLowerCase()
      def serviceBusSecret = "bsp-sb-preview"
      def namespace = new TeamConfig(this).getNameSpace(product)

      def kubectl = new Kubectl(this, subscription, namespace)
      kubectl.login()

      // Get envelopes queue connection string
      def sbPrimaryKey = kubectl.getSecret(serviceBusSecret, namespace, "{.data.primaryKey}")
      env.ENVELOPES_QUEUE_WRITE_ACCESS_KEY = sbPrimaryKey
      env.ENVELOPES_QUEUE_READ_ACCESS_KEY = sbPrimaryKey
      env.PAYMENTS_QUEUE_WRITE_ACCESS_KEY = sbPrimaryKey
      env.QUEUE_NAMESPACE = "bsp-sb-preview"
      env.QUEUE_ENVELOPES_NAME = "${aksServiceName}-servicebus-envelopes"
      env.QUEUE_PAYMENTS_NAME = "${aksServiceName}-servicebus-payments"
      env.QUEUE_READ_ACCESS_KEY_NAME = 'RootManageSharedAccessKey'
      env.QUEUE_WRITE_ACCESS_KEY_NAME = 'RootManageSharedAccessKey'
    }
  }

  afterSuccess('test') {
    builder.gradle('integration')
  }

  enableDbMigration('bulk-scan')
  enableAksStagingDeployment()
  disableLegacyDeployment()
  enableSlackNotifications(channel)
  enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])

  def branchesToSync = ['demo', 'perftest']
  syncBranchesWithMaster(branchesToSync)

  onPR() {
    loadVaultSecrets(prSecrets)
  }
  onNonPR() {
    loadVaultSecrets(nonPrSecrets)
  }
}
