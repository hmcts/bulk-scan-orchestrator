#!groovy
@Library("Infrastructure")

import uk.gov.hmcts.contino.GradleBuilder
import uk.gov.hmcts.contino.Kubectl
import uk.gov.hmcts.contino.DockerImage
import uk.gov.hmcts.contino.TeamNames

def type = "java"
def product = "bulk-scan"
def component = "orchestrator"

def channel = '#bsp-build-notices'
GradleBuilder builder = new GradleBuilder(this, product)

List<LinkedHashMap<String, Object>> secrets = [
  secret('s2s-secret-for-tests', 'S2S_SECRET'),
  secret('idam-users-bulkscan-username', 'IDAM_USER_NAME'),
  secret('idam-users-bulkscan-password', 'IDAM_USER_PASSWORD'),
  secret('idam-client-secret', 'IDAM_CLIENT_SECRET'),
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

withPipeline(type, product, component) {
  before('smoketest:aks') {
    withAksClient('nonprod') {

      // Vars needed for AKS testing
      env.RESOURCE_GROUP = 'bulk-scan-aks'
      env.S2S_NAME = 'bulk_scan_orchestrator'
      env.S2S_URL = 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'
      env.DOCUMENT_MANAGEMENT_URL = 'http://dm-store-aat.service.core-compute-aat.internal'
      env.CORE_CASE_DATA_API_URL = 'http://ccd-data-store-api-aat.service.core-compute-aat.internal'
      env.IDAM_API_URL = 'https://preprod-idamapi.reform.hmcts.net:3511'
      env.IDAM_CLIENT_REDIRECT_URI = 'https://rpe-bulk-scan-processor-sandbox.service.core-compute-sandbox.internal/oauth2/callback'

      // Envelopes queue connection string is needed by the functional tests client.
      // The following code (as ugly as it looks!) gets it from the k8s cluster
      def dockerImage = new DockerImage(product, component, null, env.BRANCH_NAME)
      def subscription = env.SUBSCRIPTION_NAME
      def aksServiceName = dockerImage.getAksServiceName().toLowerCase()
      def sbNamespaceSecret = "servicebus-secret-namespace-${aksServiceName}"
      def namespace = new TeamNames().getNameNormalizedOrThrow(product)

      def kubectl = new Kubectl(this, subscription, namespace)
      kubectl.login()

      // Get envelopes queue connection string
      def sbConnectionStr = kubectl.getSecret(sbNamespaceSecret, namespace, "{.data.connectionString}")
      env.ENVELOPES_QUEUE_WRITE_CONN_STRING = "${sbConnectionStr};EntityPath=envelopes"
    }
  }

  after('test') {
    builder.gradle('integration')
  }

  enableDockerBuild()
  installCharts()
  enableSlackNotifications(channel)
  loadVaultSecrets(secrets)

  setVaultName('bulk-scan')
}
